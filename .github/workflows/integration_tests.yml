name: Integration tests
on:
  push:
    branches:
      - main
      - develop
  pull_request:
env:
  RUSTFLAGS: -D warnings
jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Relayer Docker Image
        run: |
          docker pull ghcr.io/near/pagoda-relayer-rs-fastauth
          docker pull ghcr.io/near/sandbox
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Install Protoc
        uses: arduino/setup-protoc@v1.1.2
      - uses: Swatinem/rust-cache@v2
      - name: Bootstrap Rust Docker cache
        run: |
          mkdir -p target/{docker-cache-build-target,docker-cache/usr/{local/cargo,src/app}}
          cd target
          echo "Staging target directory for Docker cache"
          mv docker-cache-build-target docker-cache/usr/src/app/target
          echo "Staging cargo artifacts for Docker cache"
          echo '::group::rsync: ~/.cargo/{bin,git,.crates.toml,.crates2.json}'
          rsync -avh --ignore-missing-args ~/.cargo/{bin,git,.crates.toml,.crates2.json} docker-cache/usr/local/cargo
          echo "::endgroup::"
          echo '::group::rsync: ~/.cargo/registry/{cache,index}'
          rsync -avh --ignore-missing-args ~/.cargo/registry/{cache,index} docker-cache/usr/local/cargo/registry
          echo "::endgroup::"
          echo '::group::tree: docker-cache/usr/local/cargo'
          tree -a docker-cache/usr/local/cargo
          echo "::endgroup::"
          echo "::group::Preparing the cache archive"
          tar -cvzC docker-cache -f docker-cache.tgz usr
          echo "::endgroup::"
          du -h docker-cache.tgz
          rm -r docker-cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: near/mpc-recovery:latest
          load: true
          cache-from: type=gha
          # todo! figure out a way to cache docker layers
          # todo! excluding the cargo artifact import
          # cache-to: type=gha,mode=max
      - name: Export cargo artifacts from Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          cache-from: type=gha
          target: export-artifacts
          outputs: type=tar,dest=target/docker-cache.tar
      - name: Integrate Rust Docker cache into Actions environment
        run: |
          du -h target/docker-cache.tar
          echo "::group::Extracting cargo artifacts from the Docker output"
          tar -xvC ~/.cargo -f target/docker-cache.tar usr/local/cargo --strip-components=3
          echo "::endgroup::"
          echo "::group::Extracting target directory from Docker output"
          mkdir -p target/docker-cache-build-target
          tar -xvC target/docker-cache-build-target -f target/docker-cache.tar usr/src/app/target --strip-components=4
          echo "::endgroup::"
          rm target/docker-cache.tar
      # todo! revisit after experimentation has concluded
      # - name: Test
      #   run: cargo test -p mpc-recovery-integration-tests --jobs 1 -- --test-threads 1
